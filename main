import os
from PIL import Image
import cv2

# Set the paths
input_folder = 'data/raw/'           # Folder containing the original images
output_folder = 'data/processed/'     # Folder to store the processed images
target_size = (800, 600)              # Target size for resizing (width, height)

# Ensure the output folder exists
os.makedirs(output_folder, exist_ok=True)

def preprocess_images(input_folder, output_folder):
    for filename in os.listdir(input_folder):
        # Process only image files
        if filename.lower().endswith(('.png', '.jpg', '.jpeg', '.bmp', '.tiff')): #TODO: change later
            try:
                # Open the image
                img_path = os.path.join(input_folder, filename)
                with Image.open(img_path) as img:
                    # Resize the image
                    img = img.resize(target_size, Image.ANTIALIAS)
                    
                    # Save the processed image in the output folder
                    processed_path = os.path.join(output_folder, filename)
                    img.save(processed_path)
                    print(f"Processed and saved: {processed_path}")
            
            except Exception as e:
                print(f"Failed to process {filename}: {e}")

# Run the preprocessing function
preprocess_images(input_folder, output_folder)


# Implementation for SIFT keypoint detection
resized_ims = 'data/processed/'
detected_ims = 'data/keypoints/'
os.makedirs(detected_ims, exist_ok = True)


def keypoint_detector_sift(input_folder, output_folder):
    # Create a sift object
    sift = cv2.SIFT_create()
    for filename in os.listdir(input_folder):
        if filename.lower().endswith('.jpg'):
            try:
                # Read the image
                img_path = os.path.join(input_folder, filename)
                img = cv2.imread(img_path)

                # Convert image to gray scale
                img_gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)

                # Detect keypoints and compute descriptors
                keypoints, descriptors = sift.detectAndCompute(img_gray, None)

                # Draw keypoints
                img_kp = cv2.drawKeypoints(img_gray, keypoints, None, flags=cv2.DRAW_MATCHES_FLAGS_DRAW_RICH_KEYPOINTS)

                # Save out image
                output_path = os.path.join(output_folder, f"kp_{filename}")
                cv2.imwrite(output_path, img_kp)

            except Exception as e:
                print(f"Error processing {filename}: {e}")

keypoint_detector_sift(resized_ims, detected_ims)
